{"remainingRequest":"/Users/pelirodri/Documents/La Weá/Interpreters/Web/node_modules/thread-loader/dist/cjs.js!/Users/pelirodri/Documents/La Weá/Interpreters/Web/node_modules/ts-loader/index.js??ref--12-2!/Users/pelirodri/Documents/La Weá/Interpreters/Web/src/components/TheMainSection/TheMainSection.ts?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/pelirodri/Documents/La Weá/Interpreters/Web/src/components/TheMainSection/TheMainSection.ts","mtime":1590914174897},{"path":"/Users/pelirodri/Documents/La Weá/Interpreters/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pelirodri/Documents/La Weá/Interpreters/Web/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pelirodri/Documents/La Weá/Interpreters/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}