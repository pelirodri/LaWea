{"remainingRequest":"/Users/pelirodri/Documents/La Weá/Interpreters/Web/node_modules/ts-loader/index.js??ref--12-1!/Users/pelirodri/Documents/La Weá/Interpreters/Web/src/components/TheMainSection/TheMainSection.ts?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/pelirodri/Documents/La Weá/Interpreters/Web/src/components/TheMainSection/TheMainSection.ts","mtime":1570942576731},{"path":"/Users/pelirodri/Documents/La Weá/Interpreters/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pelirodri/Documents/La Weá/Interpreters/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component, Vue } from \"vue-property-decorator\";\nimport TheCodeEditor from \"../TheCodeEditor/TheCodeEditor.vue\";\nimport TheOutputManager from \"../TheOutputManager/TheOutputManager.vue\";\nimport TheInputManager from \"../TheInputManager/TheInputManager.vue\";\nimport TheErrorModal from \"../TheErrorModal/TheErrorModal.vue\";\nimport { Command } from \"./LaWeáInterpreter\";\nimport Module from \"./run_commands\";\nlet TheMainSection = class TheMainSection extends Vue {\n    constructor() {\n        super(...arguments);\n        this.output = \"\";\n        this.input = \"\";\n        this.isStopButtonDisabled = true;\n        this.isInputDisabled = true;\n        this.errorMessage = \"\";\n    }\n    interpretLaWeá(code) {\n        this.stopRunningCommands();\n        this.output = this.input = \"\";\n        this.commands = [];\n        this.loopStartsCount = this.loopEndsCount = 0;\n        this.getCommands(code);\n        this.isStopButtonDisabled = false;\n        this.runCommands();\n    }\n    getCommands(code) {\n        let commandName = \"\";\n        let line = 1, col = 1;\n        let isComment = false;\n        for (let i = 0; i <= code.length; i++) {\n            if (code[i] === \"#\") {\n                isComment = true;\n            }\n            if (i === code.length || code[i].match(/\\s/) || code[i] === \"#\") {\n                if (commandName.length) {\n                    const command = this.getCommand(commandName, line, col - commandName.length);\n                    if (command === -1) {\n                        this.exitInterpreter(\"'\" +\n                            commandName +\n                            \"'\" +\n                            \" no es un comando válido, po, saco de weas (línea: \" +\n                            String(line) +\n                            \", columna: \" +\n                            String(col - commandName.length) +\n                            \")\");\n                    }\n                    this.commands.push(command);\n                    commandName = \"\";\n                }\n            }\n            else {\n                if (!isComment) {\n                    if (!\"abcdeghiklmnopqrtuwáéíóú\".split(\"\").includes(code[i])) {\n                        this.exitInterpreter(\"'\" +\n                            code[i] +\n                            \"'\" +\n                            \" no es parte de La Weá, tonto qlo (línea: \" +\n                            String(line) +\n                            \", columna: \" +\n                            String(col) + \")\");\n                    }\n                    if (commandName.length === 7) {\n                        this.exitInterpreter(\"Voh creís q yo soy weón, ctm? Te gustan largos, parece (línea: \" +\n                            String(line) +\n                            \", columna: \" +\n                            String(col - commandName.length) +\n                            \")\");\n                    }\n                    commandName += code[i];\n                }\n            }\n            if (code[i] === \"\\n\") {\n                line++;\n                col = 0;\n                isComment = false;\n            }\n            else {\n                col++;\n            }\n        }\n        if (this.loopStartsCount !== this.loopEndsCount) {\n            this.exitInterpreter(\"O te sobran pichulas o te faltan tulas\");\n        }\n    }\n    runCommands(withInput = false) {\n        const typedCommands = new Uint8Array(this.commands);\n        const cmdPtr = Module._malloc(typedCommands.length * typedCommands.BYTES_PER_ELEMENT);\n        Module.HEAPU8.set(typedCommands, cmdPtr);\n        let bytesToWrite = 0;\n        let utf32Input = 0;\n        if (withInput) {\n            bytesToWrite = Module.lengthBytesUTF32(this.input);\n            utf32Input = Module._malloc(bytesToWrite + 4);\n            Module.stringToUTF32(this.input, utf32Input, bytesToWrite + 4);\n        }\n        Module._run_commands(cmdPtr, this.commands.length, utf32Input, bytesToWrite / 4, this.appendToOutputPtr, this.isInputDisabledPtr, this.exitInterpreterPtr);\n        Module._free(cmdPtr);\n        if (withInput) {\n            Module._free(utf32Input);\n        }\n    }\n    exitInterpreter(errorMessage, shouldDisplayError = true) {\n        if (errorMessage !== \"\\n\") {\n            if (shouldDisplayError) {\n                this.errorMessage = errorMessage;\n                this.$bvModal.show(\"error-modal\");\n            }\n            console.log(errorMessage);\n        }\n        this.stopRunningCommands();\n    }\n    stopRunningCommands() {\n        Module._stop_running_commands();\n        this.isStopButtonDisabled = true;\n        this.isInputDisabled = true;\n    }\n    getCommand(commandName, line, col) {\n        for (let cmd = 0; cmd < 16; cmd++) {\n            if (commandName === Object.values(Command)[cmd]) {\n                if (cmd === Command.pichula) {\n                    this.loopStartsCount++;\n                }\n                else if (cmd === Command.tula) {\n                    if (this.loopEndsCount === this.loopStartsCount) {\n                        this.exitInterpreter(\"Se encontró una tula sin su respectiva pichula en la línea: \" +\n                            String(line) +\n                            \", columna: \" +\n                            String(col));\n                    }\n                    this.loopEndsCount++;\n                }\n                else if (cmd === Command.pico) {\n                    if (this.loopStartsCount === this.loopEndsCount) {\n                        this.exitInterpreter(\"No debiste meter ese pico en la línea: \" +\n                            String(line) +\n                            \", columna: \" +\n                            String(col));\n                    }\n                }\n                return cmd;\n            }\n        }\n        return -1;\n    }\n    mounted() {\n        this.appendToOutputPtr = Module.addFunction((stringPtr, isNumber) => {\n            this.output += Boolean(isNumber) ? Module.UTF8ToString(stringPtr) : Module.UTF32ToString(stringPtr);\n        });\n        this.isInputDisabledPtr = Module.addFunction((isInputDisabled) => {\n            this.isInputDisabled = Boolean(isInputDisabled);\n            this.$nextTick(() => {\n                if (!this.isInputDisabled) {\n                    this.input = \"\";\n                    this.$refs.inputManager.focusInput();\n                }\n            });\n        });\n        this.exitInterpreterPtr = Module.addFunction((errorMessagePtr, shouldDisplayError) => {\n            this.exitInterpreter(Module.UTF8ToString(errorMessagePtr), Boolean(shouldDisplayError));\n        });\n    }\n};\nTheMainSection = __decorate([\n    Component({\n        components: {\n            TheCodeEditor,\n            TheOutputManager,\n            TheInputManager,\n            TheErrorModal\n        }\n    })\n], TheMainSection);\nexport default TheMainSection;\n",null]}