{"remainingRequest":"/Users/pelirodri/Documents/laweavuetesting/node_modules/ts-loader/index.js??ref--12-1!/Users/pelirodri/Documents/laweavuetesting/src/components/TheMainSection/TheMainSection.ts?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/pelirodri/Documents/laweavuetesting/src/components/TheMainSection/TheMainSection.ts","mtime":1567274949254},{"path":"/Users/pelirodri/Documents/laweavuetesting/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pelirodri/Documents/laweavuetesting/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component, Vue } from \"vue-property-decorator\";\nimport TheCodeEditor from \"../TheCodeEditor/TheCodeEditor.vue\";\nimport TheOutputManager from \"../TheOutputManager/TheOutputManager.vue\";\nimport TheInputManager from \"../TheInputManager/TheInputManager.vue\";\nimport TheErrorModal from \"../TheErrorModal/TheErrorModal.vue\";\nimport $ from \"jquery\";\nvar Command;\n(function (Command) {\n    Command[\"maric\\u00F3n\"] = \"maric\\u00F3n\";\n    Command[\"maraco\"] = \"maraco\";\n    Command[\"we\\u00F3n\"] = \"we\\u00F3n\";\n    Command[\"aweonao\"] = \"aweonao\";\n    Command[\"maraca\"] = \"maraca\";\n    Command[\"chucha\"] = \"chucha\";\n    Command[\"puta\"] = \"puta\";\n    Command[\"pichula\"] = \"pichula\";\n    Command[\"tula\"] = \"tula\";\n    Command[\"pico\"] = \"pico\";\n    Command[\"ctm\"] = \"ctm\";\n    Command[\"qu\\u00E9we\\u00E1\"] = \"qu\\u00E9we\\u00E1\";\n    Command[\"ch\\u00FApala\"] = \"ch\\u00FApala\";\n    Command[\"br\\u00EDgido\"] = \"br\\u00EDgido\";\n    Command[\"perkin\"] = \"perkin\";\n    Command[\"mierda\"] = \"mierda\";\n})(Command || (Command = {}));\nlet TheMainSection = class TheMainSection extends Vue {\n    constructor() {\n        super(...arguments);\n        this.output = \"\";\n        this.input = \"\";\n        this.isInputDisabled = true;\n        this.errorMessage = \"\";\n    }\n    interpretLaWeá(code) {\n        // console.log(\"Wtf\");\n        try {\n            const worker = new Worker(\"test.worker.js\");\n            worker.onmessage = e => {\n                console.log(e.data);\n            };\n            worker.postMessage(\"'Sup, motherfucker\");\n        }\n        catch (error) {\n            console.error(error);\n        }\n        this.output = this.input = \"\";\n        this.loopStartsLength = this.loopEndsLength = 0;\n        this.readCommandIndex = -1;\n        this.commands = [];\n        this.cells = [0n];\n        this.currentCell = 0;\n        this.isCopySet = false;\n        this.getCommands(code);\n        this.runCommands();\n    }\n    getCommands(code) {\n        let commandName = \"\";\n        let line = 1, col = 1;\n        let isComment = false;\n        for (let i = 0; i <= code.length; i++) {\n            if (code[i] === \"#\") {\n                isComment = true;\n            }\n            if (i === code.length || code[i].match(/\\s/) || code[i] === \"#\") {\n                if (commandName.length) {\n                    const command = this.getCommand(commandName, line, col - commandName.length);\n                    if (!command) {\n                        this.exitInterpreter(\"'\" +\n                            commandName +\n                            \"'\" +\n                            \" no es un comando válido, po, saco de weas (línea: \" +\n                            String(line) +\n                            \", columna: \" +\n                            String(col - commandName.length) +\n                            \")\");\n                    }\n                    this.commands.push(command);\n                    commandName = \"\";\n                }\n            }\n            else {\n                if (!isComment) {\n                    if (!\"abcdeghiklmnopqrtuwáéíóú\".split(\"\").includes(code[i])) {\n                        this.exitInterpreter(\"'\" +\n                            code[i] +\n                            \"'\" +\n                            \" no es parte de La Weá, tonto qlo (línea: \" +\n                            String(line) +\n                            \", columna: \" +\n                            String(col) + \")\");\n                    }\n                    if (commandName.length === 7) {\n                        this.exitInterpreter(\"Voh creís q yo soy weón, ctm? Te gustan largos, parece (línea: \" +\n                            String(line) +\n                            \", columna: \" +\n                            String(col - commandName.length) +\n                            \")\");\n                    }\n                    commandName += code[i];\n                }\n            }\n            if (code[i] === \"\\n\") {\n                line++;\n                col = 0;\n                isComment = false;\n            }\n            else {\n                col++;\n            }\n        }\n        if (this.loopStartsLength !== this.loopEndsLength) {\n            this.exitInterpreter(\"O te sobran pichulas o te faltan tulas\");\n        }\n    }\n    getCommand(commandName, line, col) {\n        if (Object.values(Command).includes(commandName)) {\n            if (commandName === Command.pichula) {\n                this.loopStartsLength++;\n            }\n            else if (commandName === Command.tula) {\n                if (this.loopEndsLength === this.loopStartsLength) {\n                    this.exitInterpreter(\"Se encontró una tula sin su respectiva pichula en la línea: \" +\n                        String(line) +\n                        \", columna: \" +\n                        String(col));\n                }\n                this.loopEndsLength++;\n            }\n            else if (commandName === Command.pico) {\n                if (this.loopStartsLength === this.loopEndsLength) {\n                    this.exitInterpreter(\"No debiste meter ese pico en la línea: \" +\n                        String(line) +\n                        \", columna: \" +\n                        String(col));\n                }\n            }\n            return commandName;\n        }\n        return null;\n    }\n    runCommands() {\n        for (let i = this.readCommandIndex !== -1 ? this.readCommandIndex : 0; i < this.commands.length; i++) {\n            switch (this.commands[i]) {\n                case Command.maricón:\n                    this.cells[this.currentCell]--;\n                    break;\n                case Command.maraco:\n                    this.cells[this.currentCell] -= 2n;\n                    break;\n                case Command.weón:\n                    this.cells[this.currentCell]++;\n                    break;\n                case Command.aweonao:\n                    this.cells[this.currentCell] += 2n;\n                    break;\n                case Command.maraca:\n                    this.cells[this.currentCell] = 0n;\n                    break;\n                case Command.chucha:\n                    if (!this.currentCell) {\n                        this.exitInterpreter(\"Te saliste pa la izquierda, aweonao\");\n                    }\n                    this.currentCell--;\n                    break;\n                case Command.puta:\n                    if (++this.currentCell === this.cells.length) {\n                        this.cells[this.currentCell] = 0n;\n                    }\n                    break;\n                case Command.pichula:\n                    if (!this.cells[this.currentCell]) {\n                        i = this.findLoopEnd(this.commands, i);\n                    }\n                    break;\n                case Command.tula:\n                    if (this.cells[this.currentCell]) {\n                        i = this.findLoopStart(this.commands, i);\n                    }\n                    break;\n                case Command.pico:\n                    i = this.findLoopEnd(this.commands, i);\n                    break;\n                case Command.ctm:\n                    if (this.cells[this.currentCell] >= 0x0 && this.cells[this.currentCell] <= 0x10FFFF) {\n                        this.output += String.fromCodePoint(Number(this.cells[this.currentCell]));\n                        break;\n                    }\n                    else {\n                        this.output += \"?\";\n                    }\n                    break;\n                case Command.quéweá:\n                    if (this.readCommandIndex !== -1) {\n                        this.isInputDisabled = true;\n                        this.readCommandIndex = -1;\n                        if (this.input.length === 1 || this.input.length === 2) {\n                            const codePoint = this.input.codePointAt(0);\n                            if (this.input.length === 1 || codePoint >= 0x10000) {\n                                this.cells[this.currentCell] = BigInt(codePoint);\n                                break;\n                            }\n                        }\n                        this.cells[this.currentCell] = 0n;\n                    }\n                    else {\n                        this.isInputDisabled = false;\n                        this.readCommandIndex = i;\n                        return;\n                    }\n                    break;\n                case Command.chúpala:\n                    this.output += this.cells[this.currentCell].toString();\n                    break;\n                case Command.brígido:\n                    if (this.readCommandIndex !== -1) {\n                        this.isInputDisabled = true;\n                        this.readCommandIndex = -1;\n                        if (this.input.match(/^-?\\d{1,19}$/)) {\n                            const bigInput = BigInt(this.input);\n                            if (bigInput >= -9223372036854775808n && bigInput <= 9223372036854775807n) {\n                                this.cells[this.currentCell] = bigInput;\n                                break;\n                            }\n                        }\n                        this.cells[this.currentCell] = 0n;\n                    }\n                    else {\n                        this.isInputDisabled = false;\n                        this.readCommandIndex = i;\n                        return;\n                    }\n                    break;\n                case Command.perkin:\n                    if (this.isCopySet) {\n                        this.cells[this.currentCell] = this.cellValueCopy;\n                        this.isCopySet = false;\n                    }\n                    else {\n                        this.cellValueCopy = this.cells[this.currentCell];\n                        this.isCopySet = true;\n                    }\n                    break;\n                case Command.mierda:\n                    return;\n            }\n        }\n    }\n    findLoopStart(commands, i) {\n        for (let j = i - 1, loopLevel = 1; j >= 0; j--) {\n            if (commands[j] === \"tula\") {\n                loopLevel++;\n            }\n            else if (commands[j] === \"pichula\") {\n                loopLevel--;\n            }\n            if (!loopLevel) {\n                return j;\n            }\n        }\n        return -1;\n    }\n    findLoopEnd(commands, i) {\n        for (let j = i + 1, loopLevel = 1; j < commands.length; j++) {\n            if (commands[j] === \"pichula\") {\n                loopLevel++;\n            }\n            else if (commands[j] === \"tula\") {\n                loopLevel--;\n            }\n            if (!loopLevel) {\n                return j;\n            }\n        }\n        return -1;\n    }\n    exitInterpreter(errorMessage) {\n        this.errorMessage = errorMessage;\n        $(\"#error-modal\").modal();\n        throw new Error(errorMessage);\n    }\n};\nTheMainSection = __decorate([\n    Component({\n        components: {\n            TheCodeEditor,\n            TheOutputManager,\n            TheInputManager,\n            TheErrorModal\n        }\n    })\n], TheMainSection);\nexport default TheMainSection;\n",null]}