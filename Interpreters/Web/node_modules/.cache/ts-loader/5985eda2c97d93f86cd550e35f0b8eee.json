{"remainingRequest":"/Users/pelirodri/Documents/La Weá/Interpreters/Web/node_modules/thread-loader/dist/cjs.js!/Users/pelirodri/Documents/La Weá/Interpreters/Web/node_modules/ts-loader/index.js??ref--12-2!/Users/pelirodri/Documents/La Weá/Interpreters/Web/src/components/TheMainSection/TheMainSection.ts?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/pelirodri/Documents/La Weá/Interpreters/Web/src/components/TheMainSection/TheMainSection.ts","mtime":1594341324264},{"path":"/Users/pelirodri/Documents/La Weá/Interpreters/Web/node_modules/cache-loader/dist/cjs.js","mtime":1594616360964},{"path":"/Users/pelirodri/Documents/La Weá/Interpreters/Web/node_modules/thread-loader/dist/cjs.js","mtime":1594616361199},{"path":"/Users/pelirodri/Documents/La Weá/Interpreters/Web/node_modules/ts-loader/index.js","mtime":1594616361158}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykgewogICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDsKICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gIm9iamVjdCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09ICJmdW5jdGlvbiIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTsKICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7CiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByOwp9OwppbXBvcnQgeyBDb21wb25lbnQsIFZ1ZSB9IGZyb20gInZ1ZS1wcm9wZXJ0eS1kZWNvcmF0b3IiOwppbXBvcnQgVGhlQ29kZUVkaXRvciBmcm9tICIuLi9UaGVDb2RlRWRpdG9yL1RoZUNvZGVFZGl0b3IudnVlIjsKaW1wb3J0IFRoZU91dHB1dE1hbmFnZXIgZnJvbSAiLi4vVGhlT3V0cHV0TWFuYWdlci9UaGVPdXRwdXRNYW5hZ2VyLnZ1ZSI7CmltcG9ydCBUaGVJbnB1dE1hbmFnZXIgZnJvbSAiLi4vVGhlSW5wdXRNYW5hZ2VyL1RoZUlucHV0TWFuYWdlci52dWUiOwppbXBvcnQgVGhlRXJyb3JNb2RhbCBmcm9tICIuLi9UaGVFcnJvck1vZGFsL1RoZUVycm9yTW9kYWwudnVlIjsKaW1wb3J0IHsgQ29tbWFuZCB9IGZyb20gIi4vTGFXZcOhSW50ZXJwcmV0ZXIiOwppbXBvcnQgTW9kdWxlIGZyb20gIi4vcnVuX2NvbW1hbmRzIjsKbGV0IFRoZU1haW5TZWN0aW9uID0gY2xhc3MgVGhlTWFpblNlY3Rpb24gZXh0ZW5kcyBWdWUgewogICAgY29uc3RydWN0b3IoKSB7CiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTsKICAgICAgICB0aGlzLm91dHB1dCA9ICIiOwogICAgICAgIHRoaXMuaW5wdXQgPSAiIjsKICAgICAgICB0aGlzLmlzU3RvcEJ1dHRvbkRpc2FibGVkID0gdHJ1ZTsKICAgICAgICB0aGlzLmlzSW5wdXREaXNhYmxlZCA9IHRydWU7CiAgICAgICAgdGhpcy5lcnJvck1lc3NhZ2UgPSAiIjsKICAgIH0KICAgIGludGVycHJldExhV2XDoShjb2RlKSB7CiAgICAgICAgdGhpcy5zdG9wUnVubmluZ0NvbW1hbmRzKCk7CiAgICAgICAgdGhpcy5vdXRwdXQgPSB0aGlzLmlucHV0ID0gIiI7CiAgICAgICAgdGhpcy5jb21tYW5kcyA9IFtdOwogICAgICAgIHRoaXMubG9vcFN0YXJ0c0NvdW50ID0gdGhpcy5sb29wRW5kc0NvdW50ID0gMDsKICAgICAgICB0aGlzLmdldENvbW1hbmRzKGNvZGUpOwogICAgICAgIHRoaXMuaXNTdG9wQnV0dG9uRGlzYWJsZWQgPSBmYWxzZTsKICAgICAgICB0aGlzLnJ1bkNvbW1hbmRzKCk7CiAgICB9CiAgICBnZXRDb21tYW5kcyhjb2RlKSB7CiAgICAgICAgbGV0IGNvbW1hbmROYW1lID0gIiI7CiAgICAgICAgbGV0IGxpbmUgPSAxLCBjb2wgPSAxOwogICAgICAgIGxldCBpc0NvbW1lbnQgPSBmYWxzZTsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBjb2RlLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmIChjb2RlW2ldID09PSAiIyIpIHsKICAgICAgICAgICAgICAgIGlzQ29tbWVudCA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGkgPT09IGNvZGUubGVuZ3RoIHx8IGNvZGVbaV0ubWF0Y2goL1xzLykgfHwgY29kZVtpXSA9PT0gIiMiKSB7CiAgICAgICAgICAgICAgICBpZiAoY29tbWFuZE5hbWUubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29tbWFuZCA9IHRoaXMuZ2V0Q29tbWFuZChjb21tYW5kTmFtZSwgbGluZSwgY29sIC0gY29tbWFuZE5hbWUubGVuZ3RoKTsKICAgICAgICAgICAgICAgICAgICBpZiAoY29tbWFuZCA9PT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5leGl0SW50ZXJwcmV0ZXIoIiciICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmROYW1lICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICInIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIG5vIGVzIHVuIGNvbWFuZG8gdsOhbGlkbywgcG9oLCBzYWNvIGRlIHdlYXMgKGzDrW5lYTogIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmcobGluZSkgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiwgY29sdW1uYTogIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmcoY29sIC0gY29tbWFuZE5hbWUubGVuZ3RoKSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiKSIpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHRoaXMuY29tbWFuZHMucHVzaChjb21tYW5kKTsKICAgICAgICAgICAgICAgICAgICBjb21tYW5kTmFtZSA9ICIiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgaWYgKCFpc0NvbW1lbnQpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoImFiY2RlZ2hpa2xtbm9wcXJ0dXfDocOpw63Ds8O6Ii5pbmRleE9mKGNvZGVbaV0pID09PSAtMSkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmV4aXRJbnRlcnByZXRlcigiJyIgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVtpXSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiJyIgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiBubyBlcyBwYXJ0ZSBkZSBMYSBXZcOhLCB0b250byBxbG8gKGzDrW5lYTogIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmcobGluZSkgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiwgY29sdW1uYTogIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmcoY29sKSArICIpIik7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbW1hbmROYW1lLmxlbmd0aCA9PT0gNykgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmV4aXRJbnRlcnByZXRlcigiwr9Wb2ggY3Jlw61zIHF1ZSB5byBzb3kgd2XDs24sIENUTT8gVGUgZ3VzdGFuIGxhcmdvcywgcGFyZWNlIChsw61uZWE6ICIgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RyaW5nKGxpbmUpICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIsIGNvbHVtbmE6ICIgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RyaW5nKGNvbCAtIGNvbW1hbmROYW1lLmxlbmd0aCkgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIikiKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjb21tYW5kTmFtZSArPSBjb2RlW2ldOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChjb2RlW2ldID09PSAiXG4iKSB7CiAgICAgICAgICAgICAgICBsaW5lKys7CiAgICAgICAgICAgICAgICBjb2wgPSAwOwogICAgICAgICAgICAgICAgaXNDb21tZW50ID0gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBjb2wrKzsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAodGhpcy5sb29wU3RhcnRzQ291bnQgIT09IHRoaXMubG9vcEVuZHNDb3VudCkgewogICAgICAgICAgICB0aGlzLmV4aXRJbnRlcnByZXRlcigiTyB0ZSBzb2JyYW4gcGljaHVsYXMgbyB0ZSBmYWx0YW4gdHVsYXMiKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgIH0KICAgIHJ1bkNvbW1hbmRzKHdpdGhJbnB1dCA9IGZhbHNlKSB7CiAgICAgICAgY29uc3QgdHlwZWRDb21tYW5kcyA9IG5ldyBVaW50OEFycmF5KHRoaXMuY29tbWFuZHMpOwogICAgICAgIGNvbnN0IGNtZFB0ciA9IE1vZHVsZS5fbWFsbG9jKHR5cGVkQ29tbWFuZHMubGVuZ3RoICogdHlwZWRDb21tYW5kcy5CWVRFU19QRVJfRUxFTUVOVCk7CiAgICAgICAgTW9kdWxlLkhFQVBVOC5zZXQodHlwZWRDb21tYW5kcywgY21kUHRyKTsKICAgICAgICBsZXQgYnl0ZXNUb1dyaXRlID0gMDsKICAgICAgICBsZXQgdXRmMzJJbnB1dCA9IDA7CiAgICAgICAgaWYgKHdpdGhJbnB1dCkgewogICAgICAgICAgICBieXRlc1RvV3JpdGUgPSBNb2R1bGUubGVuZ3RoQnl0ZXNVVEYzMih0aGlzLmlucHV0KTsKICAgICAgICAgICAgdXRmMzJJbnB1dCA9IE1vZHVsZS5fbWFsbG9jKGJ5dGVzVG9Xcml0ZSArIDQpOwogICAgICAgICAgICBNb2R1bGUuc3RyaW5nVG9VVEYzMih0aGlzLmlucHV0LCB1dGYzMklucHV0LCBieXRlc1RvV3JpdGUgKyA0KTsKICAgICAgICB9CiAgICAgICAgTW9kdWxlLl9ydW5fY29tbWFuZHMoY21kUHRyLCB0aGlzLmNvbW1hbmRzLmxlbmd0aCwgdXRmMzJJbnB1dCwgYnl0ZXNUb1dyaXRlIC8gNCwgdGhpcy5hcHBlbmRUb091dHB1dFB0ciwgdGhpcy5pc0lucHV0RGlzYWJsZWRQdHIsIHRoaXMuZXhpdEludGVycHJldGVyUHRyKTsKICAgICAgICBNb2R1bGUuX2ZyZWUoY21kUHRyKTsKICAgICAgICBpZiAod2l0aElucHV0KSB7CiAgICAgICAgICAgIE1vZHVsZS5fZnJlZSh1dGYzMklucHV0KTsKICAgICAgICB9CiAgICB9CiAgICBleGl0SW50ZXJwcmV0ZXIoZXJyb3JNZXNzYWdlLCBzaG91bGREaXNwbGF5RXJyb3IgPSB0cnVlKSB7CiAgICAgICAgaWYgKGVycm9yTWVzc2FnZSAhPT0gIlxuIikgewogICAgICAgICAgICBpZiAoc2hvdWxkRGlzcGxheUVycm9yKSB7CiAgICAgICAgICAgICAgICB0aGlzLmVycm9yTWVzc2FnZSA9IGVycm9yTWVzc2FnZTsKICAgICAgICAgICAgICAgIHRoaXMuJGJ2TW9kYWwuc2hvdygiZXJyb3ItbW9kYWwiKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yTWVzc2FnZSk7CiAgICAgICAgfQogICAgICAgIHRoaXMuc3RvcFJ1bm5pbmdDb21tYW5kcygpOwogICAgfQogICAgZ2V0Q29tbWFuZChjb21tYW5kTmFtZSwgbGluZSwgY29sKSB7CiAgICAgICAgZm9yIChsZXQgY21kID0gMDsgY21kIDwgMTY7IGNtZCsrKSB7CiAgICAgICAgICAgIGlmIChjb21tYW5kTmFtZSA9PT0gT2JqZWN0LnZhbHVlcyhDb21tYW5kKVtjbWRdKSB7CiAgICAgICAgICAgICAgICBpZiAoY21kID09PSBDb21tYW5kLnBpY2h1bGEpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmxvb3BTdGFydHNDb3VudCsrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSBpZiAoY21kID09PSBDb21tYW5kLnR1bGEpIHsKICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5sb29wRW5kc0NvdW50ID09PSB0aGlzLmxvb3BTdGFydHNDb3VudCkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmV4aXRJbnRlcnByZXRlcigiU2UgZW5jb250csOzIHVuYSB0dWxhIHNpbiBzdSByZXNwZWN0aXZhIHBpY2h1bGEgZW4gbGEgbMOtbmVhOiAiICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0cmluZyhsaW5lKSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiLCBjb2x1bW5hOiAiICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0cmluZyhjb2wpKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB0aGlzLmxvb3BFbmRzQ291bnQrKzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNtZCA9PT0gQ29tbWFuZC5waWNvKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubG9vcFN0YXJ0c0NvdW50ID09PSB0aGlzLmxvb3BFbmRzQ291bnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5leGl0SW50ZXJwcmV0ZXIoIk5vIGRlYmlzdGUgbWV0ZXIgZXNlIHBpY28gZW4gbGEgbMOtbmVhOiAiICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0cmluZyhsaW5lKSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiLCBjb2x1bW5hOiAiICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0cmluZyhjb2wpKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBjbWQ7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIC0xOwogICAgfQogICAgc3RvcFJ1bm5pbmdDb21tYW5kcygpIHsKICAgICAgICBNb2R1bGUuX3N0b3BfcnVubmluZ19jb21tYW5kcygpOwogICAgICAgIHRoaXMuaXNTdG9wQnV0dG9uRGlzYWJsZWQgPSB0cnVlOwogICAgICAgIHRoaXMuaXNJbnB1dERpc2FibGVkID0gdHJ1ZTsKICAgIH0KICAgIG1vdW50ZWQoKSB7CiAgICAgICAgdGhpcy5hcHBlbmRUb091dHB1dFB0ciA9IE1vZHVsZS5hZGRGdW5jdGlvbigoc3RyaW5nUHRyLCBpc051bWJlcikgPT4gewogICAgICAgICAgICB0aGlzLm91dHB1dCArPSBCb29sZWFuKGlzTnVtYmVyKSA/IE1vZHVsZS5VVEY4VG9TdHJpbmcoc3RyaW5nUHRyKSA6IE1vZHVsZS5VVEYzMlRvU3RyaW5nKHN0cmluZ1B0cik7CiAgICAgICAgfSk7CiAgICAgICAgdGhpcy5pc0lucHV0RGlzYWJsZWRQdHIgPSBNb2R1bGUuYWRkRnVuY3Rpb24oKGlzSW5wdXREaXNhYmxlZCkgPT4gewogICAgICAgICAgICB0aGlzLmlzSW5wdXREaXNhYmxlZCA9IEJvb2xlYW4oaXNJbnB1dERpc2FibGVkKTsKICAgICAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gewogICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzSW5wdXREaXNhYmxlZCkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuaW5wdXQgPSAiIjsKICAgICAgICAgICAgICAgICAgICB0aGlzLiRyZWZzLmlucHV0TWFuYWdlci5mb2N1c0lucHV0KCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICAgIHRoaXMuZXhpdEludGVycHJldGVyUHRyID0gTW9kdWxlLmFkZEZ1bmN0aW9uKChlcnJvck1lc3NhZ2VQdHIsIHNob3VsZERpc3BsYXlFcnJvcikgPT4gewogICAgICAgICAgICB0aGlzLmV4aXRJbnRlcnByZXRlcihNb2R1bGUuVVRGOFRvU3RyaW5nKGVycm9yTWVzc2FnZVB0ciksIEJvb2xlYW4oc2hvdWxkRGlzcGxheUVycm9yKSk7CiAgICAgICAgfSk7CiAgICB9Cn07ClRoZU1haW5TZWN0aW9uID0gX19kZWNvcmF0ZShbCiAgICBDb21wb25lbnQoewogICAgICAgIGNvbXBvbmVudHM6IHsKICAgICAgICAgICAgVGhlQ29kZUVkaXRvciwKICAgICAgICAgICAgVGhlT3V0cHV0TWFuYWdlciwKICAgICAgICAgICAgVGhlSW5wdXRNYW5hZ2VyLAogICAgICAgICAgICBUaGVFcnJvck1vZGFsCiAgICAgICAgfQogICAgfSkKXSwgVGhlTWFpblNlY3Rpb24pOwpleHBvcnQgZGVmYXVsdCBUaGVNYWluU2VjdGlvbjsK"},null]}