import { GraphQLDocument } from "../document";
export declare const apolloClientSchema = "#graphql\n\"\"\"\nDirect the client to resolve this field locally, either from the cache or local resolvers.\n\"\"\"\ndirective @client(\n  \"\"\"\n  When true, the client will never use the cache for this value. See\n  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true\n  \"\"\"\n  always: Boolean\n) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT\n\n\"\"\"\nExport this locally resolved field as a variable to be used in the remainder of this query. See\nhttps://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables\n\"\"\"\ndirective @export(\n  \"\"\"\n  The variable name to export this field as.\n  \"\"\"\n  as: String!\n) on FIELD\n\n\"\"\"\nSpecify a custom store key for this result. See\nhttps://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive\n\"\"\"\ndirective @connection(\n  \"\"\"\n  Specify the store key.\n  \"\"\"\n  key: String!\n  \"\"\"\n  An array of query argument names to include in the generated custom store key.\n  \"\"\"\n  filter: [String!]\n) on FIELD\n";
export declare const apolloClientSchemaDocument: GraphQLDocument;
//# sourceMappingURL=defaultClientSchema.d.ts.map